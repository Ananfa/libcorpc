// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: corpc_thirdparty.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_corpc_5fthirdparty_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_corpc_5fthirdparty_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "corpc_option.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_corpc_5fthirdparty_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_corpc_5fthirdparty_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_corpc_5fthirdparty_2eproto;
namespace corpc {
namespace thirdparty {
class PutRequest;
class PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class TakeResponse;
class TakeResponseDefaultTypeInternal;
extern TakeResponseDefaultTypeInternal _TakeResponse_default_instance_;
}  // namespace thirdparty
}  // namespace corpc
PROTOBUF_NAMESPACE_OPEN
template<> ::corpc::thirdparty::PutRequest* Arena::CreateMaybeMessage<::corpc::thirdparty::PutRequest>(Arena*);
template<> ::corpc::thirdparty::TakeResponse* Arena::CreateMaybeMessage<::corpc::thirdparty::TakeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace corpc {
namespace thirdparty {

// ===================================================================

class TakeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:corpc.thirdparty.TakeResponse) */ {
 public:
  inline TakeResponse() : TakeResponse(nullptr) {};
  virtual ~TakeResponse();

  TakeResponse(const TakeResponse& from);
  TakeResponse(TakeResponse&& from) noexcept
    : TakeResponse() {
    *this = ::std::move(from);
  }

  inline TakeResponse& operator=(const TakeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakeResponse& operator=(TakeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TakeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TakeResponse* internal_default_instance() {
    return reinterpret_cast<const TakeResponse*>(
               &_TakeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TakeResponse& a, TakeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TakeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TakeResponse* New() const final {
    return CreateMaybeMessage<TakeResponse>(nullptr);
  }

  TakeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TakeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TakeResponse& from);
  void MergeFrom(const TakeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "corpc.thirdparty.TakeResponse";
  }
  protected:
  explicit TakeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_corpc_5fthirdparty_2eproto);
    return ::descriptor_table_corpc_5fthirdparty_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
  };
  // uint64 handle = 1;
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::uint64 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_handle() const;
  void _internal_set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:corpc.thirdparty.TakeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_corpc_5fthirdparty_2eproto;
};
// -------------------------------------------------------------------

class PutRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:corpc.thirdparty.PutRequest) */ {
 public:
  inline PutRequest() : PutRequest(nullptr) {};
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PutRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const final {
    return CreateMaybeMessage<PutRequest>(nullptr);
  }

  PutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "corpc.thirdparty.PutRequest";
  }
  protected:
  explicit PutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_corpc_5fthirdparty_2eproto);
    return ::descriptor_table_corpc_5fthirdparty_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // uint64 handle = 1;
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::uint64 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_handle() const;
  void _internal_set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool error = 2;
  void clear_error();
  bool error() const;
  void set_error(bool value);
  private:
  bool _internal_error() const;
  void _internal_set_error(bool value);
  public:

  // @@protoc_insertion_point(class_scope:corpc.thirdparty.PutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 handle_;
  bool error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_corpc_5fthirdparty_2eproto;
};
// ===================================================================

class ThirdPartyService_Stub;

class ThirdPartyService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ThirdPartyService() {};
 public:
  virtual ~ThirdPartyService();

  typedef ThirdPartyService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void take(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::corpc::thirdparty::TakeResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void put(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::thirdparty::PutRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ThirdPartyService);
};

class ThirdPartyService_Stub : public ThirdPartyService {
 public:
  ThirdPartyService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  ThirdPartyService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~ThirdPartyService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements ThirdPartyService ------------------------------------------

  void take(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::Void* request,
                       ::corpc::thirdparty::TakeResponse* response,
                       ::google::protobuf::Closure* done);
  void put(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::corpc::thirdparty::PutRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ThirdPartyService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TakeResponse

// uint64 handle = 1;
inline void TakeResponse::clear_handle() {
  handle_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TakeResponse::_internal_handle() const {
  return handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TakeResponse::handle() const {
  // @@protoc_insertion_point(field_get:corpc.thirdparty.TakeResponse.handle)
  return _internal_handle();
}
inline void TakeResponse::_internal_set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  handle_ = value;
}
inline void TakeResponse::set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:corpc.thirdparty.TakeResponse.handle)
}

// -------------------------------------------------------------------

// PutRequest

// uint64 handle = 1;
inline void PutRequest::clear_handle() {
  handle_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PutRequest::_internal_handle() const {
  return handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PutRequest::handle() const {
  // @@protoc_insertion_point(field_get:corpc.thirdparty.PutRequest.handle)
  return _internal_handle();
}
inline void PutRequest::_internal_set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  handle_ = value;
}
inline void PutRequest::set_handle(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:corpc.thirdparty.PutRequest.handle)
}

// bool error = 2;
inline void PutRequest::clear_error() {
  error_ = false;
}
inline bool PutRequest::_internal_error() const {
  return error_;
}
inline bool PutRequest::error() const {
  // @@protoc_insertion_point(field_get:corpc.thirdparty.PutRequest.error)
  return _internal_error();
}
inline void PutRequest::_internal_set_error(bool value) {
  
  error_ = value;
}
inline void PutRequest::set_error(bool value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:corpc.thirdparty.PutRequest.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace thirdparty
}  // namespace corpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_corpc_5fthirdparty_2eproto
