// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: corpc_thirdparty.proto

#ifndef PROTOBUF_INCLUDED_corpc_5fthirdparty_2eproto
#define PROTOBUF_INCLUDED_corpc_5fthirdparty_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "corpc_option.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_corpc_5fthirdparty_2eproto 

namespace protobuf_corpc_5fthirdparty_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_corpc_5fthirdparty_2eproto
namespace corpc {
namespace thirdparty {
class PutRequest;
class PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class TakeResponse;
class TakeResponseDefaultTypeInternal;
extern TakeResponseDefaultTypeInternal _TakeResponse_default_instance_;
}  // namespace thirdparty
}  // namespace corpc
namespace google {
namespace protobuf {
template<> ::corpc::thirdparty::PutRequest* Arena::CreateMaybeMessage<::corpc::thirdparty::PutRequest>(Arena*);
template<> ::corpc::thirdparty::TakeResponse* Arena::CreateMaybeMessage<::corpc::thirdparty::TakeResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace corpc {
namespace thirdparty {

// ===================================================================

class TakeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corpc.thirdparty.TakeResponse) */ {
 public:
  TakeResponse();
  virtual ~TakeResponse();

  TakeResponse(const TakeResponse& from);

  inline TakeResponse& operator=(const TakeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeResponse(TakeResponse&& from) noexcept
    : TakeResponse() {
    *this = ::std::move(from);
  }

  inline TakeResponse& operator=(TakeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TakeResponse* internal_default_instance() {
    return reinterpret_cast<const TakeResponse*>(
               &_TakeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TakeResponse* other);
  friend void swap(TakeResponse& a, TakeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeResponse* New() const final {
    return CreateMaybeMessage<TakeResponse>(NULL);
  }

  TakeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TakeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TakeResponse& from);
  void MergeFrom(const TakeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::google::protobuf::uint64 handle() const;
  void set_handle(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:corpc.thirdparty.TakeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 handle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_corpc_5fthirdparty_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:corpc.thirdparty.PutRequest) */ {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PutRequest* other);
  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const final {
    return CreateMaybeMessage<PutRequest>(NULL);
  }

  PutRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 handle = 1;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::google::protobuf::uint64 handle() const;
  void set_handle(::google::protobuf::uint64 value);

  // bool error = 2;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  bool error() const;
  void set_error(bool value);

  // @@protoc_insertion_point(class_scope:corpc.thirdparty.PutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 handle_;
  bool error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_corpc_5fthirdparty_2eproto::TableStruct;
};
// ===================================================================

class ThirdPartyService_Stub;

class ThirdPartyService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ThirdPartyService() {};
 public:
  virtual ~ThirdPartyService();

  typedef ThirdPartyService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void take(::google::protobuf::RpcController* controller,
                       const ::corpc::Void* request,
                       ::corpc::thirdparty::TakeResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void put(::google::protobuf::RpcController* controller,
                       const ::corpc::thirdparty::PutRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ThirdPartyService);
};

class ThirdPartyService_Stub : public ThirdPartyService {
 public:
  ThirdPartyService_Stub(::google::protobuf::RpcChannel* channel);
  ThirdPartyService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ThirdPartyService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ThirdPartyService ------------------------------------------

  void take(::google::protobuf::RpcController* controller,
                       const ::corpc::Void* request,
                       ::corpc::thirdparty::TakeResponse* response,
                       ::google::protobuf::Closure* done);
  void put(::google::protobuf::RpcController* controller,
                       const ::corpc::thirdparty::PutRequest* request,
                       ::corpc::Void* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ThirdPartyService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TakeResponse

// uint64 handle = 1;
inline void TakeResponse::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TakeResponse::handle() const {
  // @@protoc_insertion_point(field_get:corpc.thirdparty.TakeResponse.handle)
  return handle_;
}
inline void TakeResponse::set_handle(::google::protobuf::uint64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:corpc.thirdparty.TakeResponse.handle)
}

// -------------------------------------------------------------------

// PutRequest

// uint64 handle = 1;
inline void PutRequest::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PutRequest::handle() const {
  // @@protoc_insertion_point(field_get:corpc.thirdparty.PutRequest.handle)
  return handle_;
}
inline void PutRequest::set_handle(::google::protobuf::uint64 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:corpc.thirdparty.PutRequest.handle)
}

// bool error = 2;
inline void PutRequest::clear_error() {
  error_ = false;
}
inline bool PutRequest::error() const {
  // @@protoc_insertion_point(field_get:corpc.thirdparty.PutRequest.error)
  return error_;
}
inline void PutRequest::set_error(bool value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:corpc.thirdparty.PutRequest.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace thirdparty
}  // namespace corpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_corpc_5fthirdparty_2eproto
