// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: corpc_thirdparty.proto

#include "corpc_thirdparty.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace corpc {
namespace thirdparty {
class TakeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TakeResponse>
      _instance;
} _TakeResponse_default_instance_;
class PutRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PutRequest>
      _instance;
} _PutRequest_default_instance_;
}  // namespace thirdparty
}  // namespace corpc
namespace protobuf_corpc_5fthirdparty_2eproto {
static void InitDefaultsTakeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::corpc::thirdparty::_TakeResponse_default_instance_;
    new (ptr) ::corpc::thirdparty::TakeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::corpc::thirdparty::TakeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TakeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTakeResponse}, {}};

static void InitDefaultsPutRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::corpc::thirdparty::_PutRequest_default_instance_;
    new (ptr) ::corpc::thirdparty::PutRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::corpc::thirdparty::PutRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PutRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPutRequest}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TakeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PutRequest.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::corpc::thirdparty::TakeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::corpc::thirdparty::TakeResponse, handle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::corpc::thirdparty::PutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::corpc::thirdparty::PutRequest, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::corpc::thirdparty::PutRequest, error_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::corpc::thirdparty::TakeResponse)},
  { 6, -1, sizeof(::corpc::thirdparty::PutRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::corpc::thirdparty::_TakeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::corpc::thirdparty::_PutRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "corpc_thirdparty.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026corpc_thirdparty.proto\022\020corpc.thirdpar"
      "ty\032\022corpc_option.proto\"\036\n\014TakeResponse\022\016"
      "\n\006handle\030\001 \001(\004\"+\n\nPutRequest\022\016\n\006handle\030\001"
      " \001(\004\022\r\n\005error\030\002 \001(\0102\225\001\n\021ThirdPartyServic"
      "e\022>\n\004take\022\013.corpc.Void\032\036.corpc.thirdpart"
      "y.TakeResponse\"\t\220\361\004\001\240\361\004\220N\022:\n\003put\022\034.corpc"
      ".thirdparty.PutRequest\032\013.corpc.Void\"\010\220\361\004"
      "\001\230\361\004\001\032\004\200\361\004\001B\003\200\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 304);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "corpc_thirdparty.proto", &protobuf_RegisterTypes);
  ::protobuf_corpc_5foption_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_corpc_5fthirdparty_2eproto
namespace corpc {
namespace thirdparty {

// ===================================================================

void TakeResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeResponse::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeResponse::TakeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_corpc_5fthirdparty_2eproto::scc_info_TakeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:corpc.thirdparty.TakeResponse)
}
TakeResponse::TakeResponse(const TakeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  handle_ = from.handle_;
  // @@protoc_insertion_point(copy_constructor:corpc.thirdparty.TakeResponse)
}

void TakeResponse::SharedCtor() {
  handle_ = GOOGLE_ULONGLONG(0);
}

TakeResponse::~TakeResponse() {
  // @@protoc_insertion_point(destructor:corpc.thirdparty.TakeResponse)
  SharedDtor();
}

void TakeResponse::SharedDtor() {
}

void TakeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TakeResponse::descriptor() {
  ::protobuf_corpc_5fthirdparty_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_corpc_5fthirdparty_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TakeResponse& TakeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_corpc_5fthirdparty_2eproto::scc_info_TakeResponse.base);
  return *internal_default_instance();
}


void TakeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:corpc.thirdparty.TakeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  handle_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool TakeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corpc.thirdparty.TakeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corpc.thirdparty.TakeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corpc.thirdparty.TakeResponse)
  return false;
#undef DO_
}

void TakeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corpc.thirdparty.TakeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 handle = 1;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->handle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:corpc.thirdparty.TakeResponse)
}

::google::protobuf::uint8* TakeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corpc.thirdparty.TakeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 handle = 1;
  if (this->handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->handle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:corpc.thirdparty.TakeResponse)
  return target;
}

size_t TakeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corpc.thirdparty.TakeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 handle = 1;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TakeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corpc.thirdparty.TakeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corpc.thirdparty.TakeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corpc.thirdparty.TakeResponse)
    MergeFrom(*source);
  }
}

void TakeResponse::MergeFrom(const TakeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corpc.thirdparty.TakeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.handle() != 0) {
    set_handle(from.handle());
  }
}

void TakeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corpc.thirdparty.TakeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeResponse::CopyFrom(const TakeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corpc.thirdparty.TakeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeResponse::IsInitialized() const {
  return true;
}

void TakeResponse::Swap(TakeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeResponse::InternalSwap(TakeResponse* other) {
  using std::swap;
  swap(handle_, other->handle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TakeResponse::GetMetadata() const {
  protobuf_corpc_5fthirdparty_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_corpc_5fthirdparty_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PutRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutRequest::kHandleFieldNumber;
const int PutRequest::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutRequest::PutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_corpc_5fthirdparty_2eproto::scc_info_PutRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:corpc.thirdparty.PutRequest)
}
PutRequest::PutRequest(const PutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&handle_, &from.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:corpc.thirdparty.PutRequest)
}

void PutRequest::SharedCtor() {
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(error_));
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:corpc.thirdparty.PutRequest)
  SharedDtor();
}

void PutRequest::SharedDtor() {
}

void PutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PutRequest::descriptor() {
  ::protobuf_corpc_5fthirdparty_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_corpc_5fthirdparty_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PutRequest& PutRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_corpc_5fthirdparty_2eproto::scc_info_PutRequest.base);
  return *internal_default_instance();
}


void PutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:corpc.thirdparty.PutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(error_));
  _internal_metadata_.Clear();
}

bool PutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corpc.thirdparty.PutRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corpc.thirdparty.PutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corpc.thirdparty.PutRequest)
  return false;
#undef DO_
}

void PutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corpc.thirdparty.PutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 handle = 1;
  if (this->handle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->handle(), output);
  }

  // bool error = 2;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->error(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:corpc.thirdparty.PutRequest)
}

::google::protobuf::uint8* PutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corpc.thirdparty.PutRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 handle = 1;
  if (this->handle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->handle(), target);
  }

  // bool error = 2;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->error(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:corpc.thirdparty.PutRequest)
  return target;
}

size_t PutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corpc.thirdparty.PutRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 handle = 1;
  if (this->handle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->handle());
  }

  // bool error = 2;
  if (this->error() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corpc.thirdparty.PutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corpc.thirdparty.PutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corpc.thirdparty.PutRequest)
    MergeFrom(*source);
  }
}

void PutRequest::MergeFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corpc.thirdparty.PutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.handle() != 0) {
    set_handle(from.handle());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void PutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corpc.thirdparty.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRequest::CopyFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corpc.thirdparty.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequest::IsInitialized() const {
  return true;
}

void PutRequest::Swap(PutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutRequest::InternalSwap(PutRequest* other) {
  using std::swap;
  swap(handle_, other->handle_);
  swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PutRequest::GetMetadata() const {
  protobuf_corpc_5fthirdparty_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_corpc_5fthirdparty_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

ThirdPartyService::~ThirdPartyService() {}

const ::google::protobuf::ServiceDescriptor* ThirdPartyService::descriptor() {
  protobuf_corpc_5fthirdparty_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_corpc_5fthirdparty_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* ThirdPartyService::GetDescriptor() {
  return descriptor();
}

void ThirdPartyService::take(::google::protobuf::RpcController* controller,
                         const ::corpc::Void*,
                         ::corpc::thirdparty::TakeResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method take() not implemented.");
  done->Run();
}

void ThirdPartyService::put(::google::protobuf::RpcController* controller,
                         const ::corpc::thirdparty::PutRequest*,
                         ::corpc::Void*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method put() not implemented.");
  done->Run();
}

void ThirdPartyService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_corpc_5fthirdparty_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      take(controller,
             ::google::protobuf::down_cast<const ::corpc::Void*>(request),
             ::google::protobuf::down_cast< ::corpc::thirdparty::TakeResponse*>(response),
             done);
      break;
    case 1:
      put(controller,
             ::google::protobuf::down_cast<const ::corpc::thirdparty::PutRequest*>(request),
             ::google::protobuf::down_cast< ::corpc::Void*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ThirdPartyService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::corpc::Void::default_instance();
    case 1:
      return ::corpc::thirdparty::PutRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& ThirdPartyService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::corpc::thirdparty::TakeResponse::default_instance();
    case 1:
      return ::corpc::Void::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

ThirdPartyService_Stub::ThirdPartyService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ThirdPartyService_Stub::ThirdPartyService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ThirdPartyService_Stub::~ThirdPartyService_Stub() {
  if (owns_channel_) delete channel_;
}

void ThirdPartyService_Stub::take(::google::protobuf::RpcController* controller,
                              const ::corpc::Void* request,
                              ::corpc::thirdparty::TakeResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ThirdPartyService_Stub::put(::google::protobuf::RpcController* controller,
                              const ::corpc::thirdparty::PutRequest* request,
                              ::corpc::Void* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace thirdparty
}  // namespace corpc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::corpc::thirdparty::TakeResponse* Arena::CreateMaybeMessage< ::corpc::thirdparty::TakeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::corpc::thirdparty::TakeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::corpc::thirdparty::PutRequest* Arena::CreateMaybeMessage< ::corpc::thirdparty::PutRequest >(Arena* arena) {
  return Arena::CreateInternal< ::corpc::thirdparty::PutRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
